# This workflow provided by GitHub Actions for Node.js projects
# Documentation: https://github.com/vemel/github_actions_js/blob/main/workflows/README.md
#
# - Starts only manually
# - Can be used if you do not enforce Pull Request-based updates and commit directly to `target` branch
# - Creates or updates a release draft for `target` branch
# - Release notes are populated from `Unreleased` section of `CHANGELOG.md`
# - Sets suggested version as `name` and `tag` of the Release

name: Create Release draft
"on":
  workflow_dispatch:
    inputs:
      release:
        description: "Release type: stable, rc, alpha, or beta"
        required: true
        default: stable
jobs:
  create-release-draft:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Release target branch
        id: checkout
        uses: actions/checkout@v2
        with:
          github-actions-managed: true
      - name: Get Unreleased notes
        id: unreleased
        uses: vemel/nextchange@0.1.0
        with:
          get: Unreleased
          sanitize: true
          github-actions-managed: true
      - name: Get or create Release draft
        uses: actions/github-script@v3
        id: release
        with:
          script: |
            // github-actions-managed: true
            let release = null;
            const baseBranch = ${{ toJSON(github.event.ref) }}.replace("refs/heads/", "");
            const unreleased = ${{ toJSON(steps.unreleased.outputs.result) }};

            // find existing relese draft for pull request base branch in first 100 releases
            const releasesResponse = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            for (let releaseItem of releasesResponse.data) {
              if (!releaseItem.draft) continue;
              if (releaseItem.target_commitish !== baseBranch) continue;
              release = releaseItem;
              core.info(`Found existing release draft ${release.name}`);
              break;
            }

            // create a release draft if there is none
            if (!release) {
              const response = await github.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: '0.0.0',
                name: '0.0.0',
                draft: true,
                target_commitish: baseBranch,
                body: ${{ toJSON(steps.unreleased.outputs.result) }},
              })
              release = response.data;
              core.info(`Created Release draft ${release.name}`);
            }

            core.setOutput('id', release.id);
            core.setOutput("url", release.html_url);
            core.setOutput('tag', release.tag_name);
            core.setOutput('name', release.name);
            core.setOutput('body', unreleased);
      - name: Analyze Release notes
        id: notes
        uses: vemel/nextchange@0.1.0
        with:
          set: ${{ steps.release.outputs.body }}
          github-actions-managed: true
      - name: Get suggested version
        id: version
        uses: vemel/nextversion@0.1.1
        with:
          path: ./package.json
          type: semver
          release: ${{ github.event.inputs.release }}
          result: ${{ steps.notes.outputs.label }}
          github-actions-managed: true
      - name: Update release draft
        id: update-release
        uses: actions/github-script@v3
        with:
          script: |
            // github-actions-managed: true
            const releaseId = ${{ steps.release.outputs.id }};
            core.info(`Release ID: ${releaseId}`);

            // set release draft tag and name to suggested version
            const version = ${{ toJSON(steps.version.outputs.result) }};
            core.info(`Release version: ${version}`);

            const body = ${{ toJSON(steps.notes.outputs.result) }};
            core.info(`Release body: ${body}`);

            const response = await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              tag_name: version,
              name: version,
              draft: true,
              body: body,
              prerelease: ${{ steps.version.outputs.is-prerelease }},
            });
            core.info(`Release URL: ${response.data.html_url}`);
